openapi: 3.0.3
info:
  title: Backend API
  version: 1.0.0
  description: Descripcion de la API
paths:
  /api/accounts/login/:
    post:
      operationId: accounts_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomTokenObtainPair'
          description: ''
  /api/accounts/logout/:
    post:
      operationId: accounts_logout_create
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Logout'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Logout'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Logout'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logout'
          description: ''
  /api/accounts/register/:
    post:
      operationId: accounts_register_create
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /api/accounts/users/:
    get:
      operationId: accounts_users_list
      description: Permite obtener una lista paginada de usuarios con filtros por
        email, nombre(s), apellido(s), estado activo y estado verificado.
      summary: Listar usuarios del sistema
      parameters:
      - in: query
        name: email
        schema:
          type: string
        description: Filtrar por email
      - in: query
        name: first_name
        schema:
          type: string
        description: Filtrar por nombre(s)
      - in: query
        name: is_active
        schema:
          type: boolean
        description: Filtrar por estado activo
      - in: query
        name: is_verified
        schema:
          type: boolean
        description: Filtrar por estado verificado
      - in: query
        name: last_name
        schema:
          type: string
        description: Filtrar por apellido(s)
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - accounts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
components:
  schemas:
    CustomTokenObtainPair:
      type: object
      description: Se obtiene el token de acceso y el token de actualización
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    Logout:
      type: object
      description: Cerrar sesión
      properties:
        refresh:
          type: string
      required:
      - refresh
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Register:
      type: object
      description: Crear un nuevo usuario
      properties:
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          nullable: true
          maxLength: 150
        password:
          type: string
          writeOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - first_name
      - last_name
      - password
    User:
      type: object
      description: Listar los usuarios
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        is_verified:
          type: boolean
        is_active:
          type: boolean
        last_activity:
          type: string
          format: date-time
          nullable: true
      required:
      - email
      - first_name
      - id
      - last_name
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
